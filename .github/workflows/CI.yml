name: CI

# Sources
# - https://github.com/JuliaDocs/Documenter.jl/blob/master/.github/workflows/CI.yml
# - https://discourse.julialang.org/t/easy-workflow-file-for-setting-up-github-actions-ci-for-your-julia-package/49765
on:
  push:
    branches:
      - "master"
      - "release-"
    tags: "*"
  pull_request:

# Cancel previous runs of this workflow for the same pull request
# `github.head_ref`: https://stackoverflow.com/a/67939898/1404966
# `github.run_id`: https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#example-using-a-fallback-value
concurrency:
  group: ${{ github.head_ref || github.run_id }}
  cancel-in-progress: true

jobs:
  test:
    name: Julia ${{ matrix.version }} - ${{ matrix.os }} - ${{ matrix.arch }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        version:
          # we are excluding nightly builds because they can fail, and we want this to be a
          # required check
          - "1.6" # minimum Julia version that this package supports
          - "1" # automatically expands to latest stable 1.x release of Julia
        os:
          - ubuntu-latest
          - macos-latest
          - windows-latest
        arch:
          - x64
    steps:
      - uses: actions/checkout@v3
      - uses: julia-actions/setup-julia@v1
        with:
          version: ${{ matrix.version }}
          arch: ${{ matrix.arch }}
          show-versioninfo: true
      - uses: actions/cache@v3
        env:
          cache-name: cache-artifacts
        with:
          path: ~/.julia/artifacts
          key: ${{ runner.os }}-test-${{ env.cache-name }}-${{ hashFiles('**/Project.toml') }}
          restore-keys: |
            ${{ runner.os }}-test-${{ env.cache-name }}-
            ${{ runner.os }}-test-
            ${{ runner.os }}-
      - uses: julia-actions/julia-buildpkg@v1
      - uses: julia-actions/julia-runtest@v1
      - uses: julia-actions/julia-processcoverage@v1
      - uses: codecov/codecov-action@v3
        with:
          file: lcov.info

  docs:
    name: Documentation
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: julia-actions/setup-julia@v1
        with:
          version: "1"
      - run: |
          julia --project=docs -e '
            using Pkg
            Pkg.develop(PackageSpec(path=pwd()))
            Pkg.instantiate()'
      - run: |
          julia --project=docs -e '
            using Documenter: doctest
            using MIPVerify
            doctest(MIPVerify)'
      - run: julia --project=docs docs/make.jl
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          # I created a `DOCUMENTER_KEY` secret, via
          # https://discourse.julialang.org/t/easy-workflow-file-for-setting-up-github-actions-ci-for-your-julia-package/49765/46
          DOCUMENTER_KEY: ${{ secrets.DOCUMENTER_KEY }}

  # JuliaFormatter check, based off of
  # https://github.com/julia-actions/julia-format/blob/096371fb8d24867760569a7a89359a677595503b/workflows/format_check.yml
  format-check:
    name: "Check Formatting"
    runs-on: "ubuntu-latest"
    steps:
      - uses: actions/checkout@v3
      - uses: julia-actions/setup-julia@latest
        with:
          version: "1"
      - name:
          "run format.sh (installs pinned version of JuliaFormatter and runs `format` on all files)"
        run: ./scripts/format.sh
      - name: "Check that running `format` is a no-op."
        run: |
          julia -e '
          out = Cmd(`git diff --name-only`) |> read |> String
          if out == ""
              exit(0)
          else
              @error "Some files did not meet the formatting guidelines. Run ./scripts/format.sh to fix."
              write(stdout, "\nFiles not meeting formatting guidelines:\n")
              write(stdout, out)
              write(stdout, "\nRun ./scripts/format.sh to fix.")
              exit(1)
          end'
